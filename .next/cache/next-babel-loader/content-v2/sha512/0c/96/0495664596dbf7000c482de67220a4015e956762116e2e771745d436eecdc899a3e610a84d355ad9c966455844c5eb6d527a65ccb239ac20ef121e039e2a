{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\react_js\\\\study\\\\23\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetUpId]\\\\index.js\";\n// domain/:meetUpId\nimport { MongoClient } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nconst MeetupDetailsPage = () => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    image: \"\",\n    title: \"\",\n    address: \"\",\n    description: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}; //hàm này chạy trước getStaticProps - dùng để xử lý tham số trên đường dẫn\n\n\nexport const getStaticPaths = async () => {\n  //kết nối mongo database\n  const client = await MongoClient.connect('mongodb+srv://tothanhtin12345:Anhyeuem123@cluster0.fe40c.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db(); //truy cập đến meetups document\n\n  const meetupsCollection = db.collection('meetups'); //lấy mảng các meet up id để đặt vào paths\n\n  const meetupsId = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); // tham số thứ hai {_id:1} chỉ ra đối tượng muốn lấy từ tập dữ liệu\n\n  return {\n    //nếu fallback: false thì chỉ trả về những giá trị tương ứng với key (tên file hoặc thư mục tham số) có giá trị trong paths\n    // ví dụ như domain/m1 => trong paths có meetUpId: 'm1' => trả về phần params chứa  meetUpId: 'm1 => ngược lại hiển thị một 404 page\n    //nếu fallback: true thì sẽ trả về giá trị mà người dùng nhập trên path \n    //ví dụ như domain/m1 => trả về luôn params: {meetUpId:'m1'} mà không cần quan tâm đến paths\n    // lưu ý tham số trả về luôn phải ở dạng params: { keyname(tương ứng với tên file hoặc tên thư mục tham số):giá trị }\n    //dùng fallback: false sẽ bảo mật hơn\n    fallback: false,\n    //dựa vào tham số trên đường dẫn - một đối tượng tham số tương ứng trong mảng paths sẽ được lấy ra và truyền cho hàm getStaticProps\n    //paths trong trường hợp này sẽ nhận dữ liệu csdl\n    paths: meetupsId.map(data => {\n      return {\n        params: {\n          meetUpId: data._id.toString()\n        }\n      };\n    }) // paths:[\n    //     {\n    //         params:{\n    //             //key giá trị phải trùng với tên file hoặc thư mục tham số\n    //             meetUpId: 'm1',\n    //         }\n    //     },\n    //     {\n    //         params:{\n    //             meetUpId: 'm2',\n    //         }\n    //     },\n    // ]\n\n  };\n}; //sử dụng getStaticProps vì project hiện tại không có chức năng thay đổi\n//bên cạnh đó thực tế thì meetup không thay đổi thường xuyên\n\nexport const getStaticProps = async context => {\n  //muốn lấy giá trị từ context.params thì trước hết phải có hàm getStaticPaths\n  const meetUpId = context.params.meetUpId;\n  console.log(meetUpId); //truy cập mongo để lấy chi tiết một id\n  //kết nối mongo database\n\n  const client = await MongoClient.connect('mongodb+srv://tothanhtin12345:Anhyeuem123@cluster0.fe40c.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db(); //truy cập đến meetups document\n\n  const meetupsCollection = db.collection('meetups'); //lấy dữ liệu 1 meet up dựa vào id\n\n  const meetup = await meetupsCollection.findOne({\n    _id: meetUpId\n  });\n  console.log(meetup);\n  return {\n    props: {\n      meetupData: {\n        id: '',\n        image: '',\n        address: '',\n        description: ''\n      }\n    }\n  };\n};\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["E:/react_js/study/23/06-onwards-to-a-bigger-project-starting-project/pages/[meetUpId]/index.js"],"names":["MongoClient","Fragment","MeetupDetails","MeetupDetailsPage","getStaticPaths","client","connect","db","meetupsCollection","collection","meetupsId","find","_id","toArray","fallback","paths","map","data","params","meetUpId","toString","getStaticProps","context","console","log","meetup","findOne","props","meetupData","id","image","address","description"],"mappings":";;AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,aAAP,MAA0B,wCAA1B;;AACA,MAAMC,iBAAiB,GAAG,MAAM;AAC5B,sBACI,QAAC,aAAD;AACI,IAAA,KAAK,EAAC,EADV;AAEI,IAAA,KAAK,EAAC,EAFV;AAGI,IAAA,OAAO,EAAC,EAHZ;AAII,IAAA,WAAW,EAAC;AAJhB;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CATD,C,CAWA;;;AACA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACrC;AACA,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAClB,0GADkB,CAArB;AAGD,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CALsC,CAMtC;;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAPsC,CAQtC;;AACA,QAAMC,SAAS,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA1B,EAAmCC,OAAnC,EAAxB,CATsC,CASgC;;AACtE,SAAM;AACF;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE,KAPR;AAQF;AACA;AACAC,IAAAA,KAAK,EAAEL,SAAS,CAACM,GAAV,CAAcC,IAAI,IAAE;AACvB,aAAO;AACHC,QAAAA,MAAM,EAAC;AACHC,UAAAA,QAAQ,EAAEF,IAAI,CAACL,GAAL,CAASQ,QAAT;AADP;AADJ,OAAP;AAKH,KANM,CAVL,CAiBF;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AA/BE,GAAN;AAkCH,CA5CM,C,CA8CP;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC7C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAH6C,CAI7C;AACA;;AACA,QAAMd,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CACjB,0GADiB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAT6C,CAU7C;;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAX6C,CAY7C;;AACA,QAAMgB,MAAM,GAAG,MAAMjB,iBAAiB,CAACkB,OAAlB,CAA0B;AAACd,IAAAA,GAAG,EAACO;AAAL,GAA1B,CAArB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,SAAO;AACHE,IAAAA,KAAK,EAAC;AACFC,MAAAA,UAAU,EAAC;AACPC,QAAAA,EAAE,EAAC,EADI;AAEPC,QAAAA,KAAK,EAAC,EAFC;AAGPC,QAAAA,OAAO,EAAC,EAHD;AAIPC,QAAAA,WAAW,EAAC;AAJL;AADT;AADH,GAAP;AAUH,CAzBM;AA2BP,eAAe7B,iBAAf","sourcesContent":["// domain/:meetUpId\r\nimport { MongoClient } from \"mongodb\";\r\nimport { Fragment } from \"react\";\r\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\r\nconst MeetupDetailsPage = () => {\r\n    return (\r\n        <MeetupDetails\r\n            image=''\r\n            title=''\r\n            address=''\r\n            description=''\r\n        />\r\n    );\r\n}\r\n\r\n//hàm này chạy trước getStaticProps - dùng để xử lý tham số trên đường dẫn\r\nexport const getStaticPaths = async () => {\r\n     //kết nối mongo database\r\n     const client = await MongoClient.connect(\r\n        'mongodb+srv://tothanhtin12345:Anhyeuem123@cluster0.fe40c.mongodb.net/meetups?retryWrites=true&w=majority'\r\n    )\r\n    const db = client.db();\r\n    //truy cập đến meetups document\r\n    const meetupsCollection = db.collection('meetups');\r\n    //lấy mảng các meet up id để đặt vào paths\r\n    const meetupsId = await meetupsCollection.find({},{_id:1}).toArray(); // tham số thứ hai {_id:1} chỉ ra đối tượng muốn lấy từ tập dữ liệu\r\n    return{\r\n        //nếu fallback: false thì chỉ trả về những giá trị tương ứng với key (tên file hoặc thư mục tham số) có giá trị trong paths\r\n        // ví dụ như domain/m1 => trong paths có meetUpId: 'm1' => trả về phần params chứa  meetUpId: 'm1 => ngược lại hiển thị một 404 page\r\n        //nếu fallback: true thì sẽ trả về giá trị mà người dùng nhập trên path \r\n        //ví dụ như domain/m1 => trả về luôn params: {meetUpId:'m1'} mà không cần quan tâm đến paths\r\n        // lưu ý tham số trả về luôn phải ở dạng params: { keyname(tương ứng với tên file hoặc tên thư mục tham số):giá trị }\r\n        //dùng fallback: false sẽ bảo mật hơn\r\n        fallback: false,\r\n        //dựa vào tham số trên đường dẫn - một đối tượng tham số tương ứng trong mảng paths sẽ được lấy ra và truyền cho hàm getStaticProps\r\n        //paths trong trường hợp này sẽ nhận dữ liệu csdl\r\n        paths: meetupsId.map(data=>{\r\n            return {\r\n                params:{\r\n                    meetUpId: data._id.toString(),\r\n                }\r\n            }\r\n        })\r\n        // paths:[\r\n        //     {\r\n                \r\n        //         params:{\r\n        //             //key giá trị phải trùng với tên file hoặc thư mục tham số\r\n        //             meetUpId: 'm1',\r\n        //         }\r\n        //     },\r\n        //     {\r\n        //         params:{\r\n        //             meetUpId: 'm2',\r\n        //         }\r\n        //     },\r\n\r\n        // ]\r\n\r\n    }\r\n}\r\n\r\n//sử dụng getStaticProps vì project hiện tại không có chức năng thay đổi\r\n//bên cạnh đó thực tế thì meetup không thay đổi thường xuyên\r\n\r\nexport const getStaticProps = async (context) => {\r\n    //muốn lấy giá trị từ context.params thì trước hết phải có hàm getStaticPaths\r\n    const meetUpId = context.params.meetUpId;\r\n    console.log(meetUpId)\r\n    //truy cập mongo để lấy chi tiết một id\r\n    //kết nối mongo database\r\n    const client = await MongoClient.connect(\r\n        'mongodb+srv://tothanhtin12345:Anhyeuem123@cluster0.fe40c.mongodb.net/meetups?retryWrites=true&w=majority'\r\n    )\r\n    const db = client.db();\r\n    //truy cập đến meetups document\r\n    const meetupsCollection = db.collection('meetups');\r\n    //lấy dữ liệu 1 meet up dựa vào id\r\n    const meetup = await meetupsCollection.findOne({_id:meetUpId});\r\n    console.log(meetup);\r\n    return {\r\n        props:{\r\n            meetupData:{\r\n                id:'',\r\n                image:'',\r\n                address:'',\r\n                description:'',\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default MeetupDetailsPage;"]},"metadata":{},"sourceType":"module"}