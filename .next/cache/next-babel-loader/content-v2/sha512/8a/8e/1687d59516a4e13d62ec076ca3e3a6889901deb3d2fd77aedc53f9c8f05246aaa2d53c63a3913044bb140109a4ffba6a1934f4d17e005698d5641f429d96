{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// domain/:meetUpId\nimport { MongoClient, ObjectID } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nconst MeetupDetailsPage = props => {\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: props.meetupData.title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      })]\n    }), /*#__PURE__*/_jsx(MeetupDetails, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    })]\n  });\n}; //hàm này chạy trước getStaticProps - dùng để xử lý tham số trên đường dẫn\n\n\nexport const getStaticPaths = async () => {\n  //kết nối mongo database\n  const client = await MongoClient.connect(\"mongodb+srv://tothanhtin12345:Anhyeuem123@cluster0.fe40c.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db(); //truy cập đến meetups document\n\n  const meetupsCollection = db.collection(\"meetups\"); //lấy mảng các meet up id để đặt vào paths\n\n  const meetupsId = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); // tham số thứ hai {_id:1} chỉ ra đối tượng muốn lấy từ tập dữ liệu\n\n  client.close();\n  return {\n    //nếu fallback: false thì chỉ trả về những giá trị tương ứng với key (tên file hoặc thư mục tham số) có giá trị trong paths\n    // ví dụ như domain/m1 => trong paths có meetUpId: 'm1' => trả về phần params chứa  meetUpId: 'm1 => ngược lại hiển thị một 404 page\n    //nếu fallback: true thì sẽ trả về giá trị mà người dùng nhập trên path\n    //ví dụ như domain/m1 => trả về luôn params: {meetUpId:'m1'} mà không cần quan tâm đến paths\n    // lưu ý tham số trả về luôn phải ở dạng params: { keyname(tương ứng với tên file hoặc tên thư mục tham số):giá trị }\n    //dùng fallback: false sẽ bảo mật hơn\n    fallback: false,\n    //dựa vào tham số trên đường dẫn - một đối tượng tham số tương ứng trong mảng paths sẽ được lấy ra và truyền cho hàm getStaticProps\n    //paths trong trường hợp này sẽ nhận dữ liệu csdl\n    paths: meetupsId.map(data => {\n      return {\n        params: {\n          meetUpId: data._id.toString()\n        }\n      };\n    }) // paths:[\n    //     {\n    //         params:{\n    //             //key giá trị phải trùng với tên file hoặc thư mục tham số\n    //             meetUpId: 'm1',\n    //         }\n    //     },\n    //     {\n    //         params:{\n    //             meetUpId: 'm2',\n    //         }\n    //     },\n    // ]\n\n  };\n}; //sử dụng getStaticProps vì project hiện tại không có chức năng thay đổi\n//bên cạnh đó thực tế thì meetup không thay đổi thường xuyên\n\nexport const getStaticProps = async context => {\n  //muốn lấy giá trị từ context.params thì trước hết phải có hàm getStaticPaths\n  const meetUpId = context.params.meetUpId;\n  console.log(meetUpId); //truy cập mongo để lấy chi tiết một id\n  //kết nối mongo database\n\n  const client = await MongoClient.connect(\"mongodb+srv://tothanhtin12345:Anhyeuem123@cluster0.fe40c.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db(); //truy cập đến meetups document\n\n  const meetupsCollection = db.collection(\"meetups\"); //lấy dữ liệu 1 meet up dựa vào id\n\n  const meetup = await meetupsCollection.findOne({\n    _id: ObjectID(meetUpId)\n  }, {\n    _id: 0\n  });\n  client.close();\n  console.log(meetup);\n  return {\n    props: {\n      meetupData: {\n        id: meetup._id.toString(),\n        title: meetup.title,\n        address: meetup.address,\n        description: meetup.description,\n        image: meetup.image\n      }\n    }\n  };\n};\nexport default MeetupDetailsPage;","map":null,"metadata":{},"sourceType":"module"}